# Generated by Neurodocker version 0.4.3-2-g01cdd22
# Timestamp: 2019-02-06 16:37:48 UTC
# 
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
# 
#     https://github.com/kaczmarj/neurodocker

FROM nipype/nipype:base

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker

ENTRYPOINT ["/neurodocker/startup.sh"]

RUN useradd --no-user-group --create-home --shell /bin/bash neuro
USER neuro

ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda update -yq -nbase conda \
    && conda config --system --prepend channels conda-forge \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    && sync && conda clean -tipsy && sync \
    && conda create -y -q --name neuro \
    && conda install -y -q --name neuro \
           'python=3.6' \
           'icu=58.1' \
           'libxml2' \
           'libxslt' \
           'matplotlib' \
           'mkl' \
           'numpy' \
           'paramiko' \
           'pandas' \
           'psutil' \
           'scikit-learn' \
           'scipy' \
           'traits=4.6.0' \
    && sync && conda clean -tipsy && sync \
    && bash -c "source activate neuro \
    &&   pip install --no-cache-dir  \
             'grabbit==0.1.2' \
             'https://github.com/INCF/pybids/tarball/0.6.5'" \
    && rm -rf ~/.cache/pip/* \
    && sync \
    && sed -i '$isource activate neuro' $ND_ENTRYPOINT

COPY ["docker/files/run_builddocs.sh", "docker/files/run_examples.sh", "docker/files/run_pytests.sh", "nipype/external/fsl_imglob.py", "/usr/bin/"]

COPY [".", "/src/nipype"]

USER root

RUN chown -R neuro /src \
    && chmod +x /usr/bin/fsl_imglob.py /usr/bin/run_*.sh \
    && . /etc/fsl/fsl.sh \
    && ln -sf /usr/bin/fsl_imglob.py ${FSLDIR}/bin/imglob \
    && mkdir /work \
    && chown neuro /work

USER neuro

RUN bash -c "source activate neuro \
    &&   pip install --no-cache-dir -e \
             '/src/nipype[all]'" \
    && rm -rf ~/.cache/pip/* \
    && sync

USER root

RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           connectome-workbench \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN cp /neurodocker/startup.sh /singularity

USER neuro

WORKDIR /work

RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "nipype/nipype:base" \
    \n    ], \
    \n    [ \
    \n      "user", \
    \n      "neuro" \
    \n    ], \
    \n    [ \
    \n      "miniconda", \
    \n      { \
    \n        "create_env": "neuro", \
    \n        "conda_install": [ \
    \n          "python=3.6", \
    \n          "icu=58.1", \
    \n          "libxml2", \
    \n          "libxslt", \
    \n          "matplotlib", \
    \n          "mkl", \
    \n          "numpy", \
    \n          "paramiko", \
    \n          "pandas", \
    \n          "psutil", \
    \n          "scikit-learn", \
    \n          "scipy", \
    \n          "traits=4.6.0" \
    \n        ], \
    \n        "pip_install": [ \
    \n          "grabbit==0.1.2", \
    \n          "https://github.com/INCF/pybids/tarball/0.6.5" \
    \n        ], \
    \n        "activate": true \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "copy", \
    \n      [ \
    \n        "docker/files/run_builddocs.sh", \
    \n        "docker/files/run_examples.sh", \
    \n        "docker/files/run_pytests.sh", \
    \n        "nipype/external/fsl_imglob.py", \
    \n        "/usr/bin/" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "copy", \
    \n      [ \
    \n        ".", \
    \n        "/src/nipype" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "user", \
    \n      "root" \
    \n    ], \
    \n    [ \
    \n      "run", \
    \n      "chown -R neuro /src\\n&& chmod +x /usr/bin/fsl_imglob.py /usr/bin/run_*.sh\\n&& . /etc/fsl/fsl.sh\\n&& ln -sf /usr/bin/fsl_imglob.py ${FSLDIR}/bin/imglob\\n&& mkdir /work\\n&& chown neuro /work" \
    \n    ], \
    \n    [ \
    \n      "user", \
    \n      "neuro" \
    \n    ], \
    \n    [ \
    \n      "miniconda", \
    \n      { \
    \n        "use_env": "neuro", \
    \n        "pip_opts": "-e", \
    \n        "pip_install": [ \
    \n          "/src/nipype[all]" \
    \n        ] \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "user", \
    \n      "root" \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "connectome-workbench" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "run", \
    \n      "cp /neurodocker/startup.sh /singularity" \
    \n    ], \
    \n    [ \
    \n      "user", \
    \n      "neuro" \
    \n    ], \
    \n    [ \
    \n      "workdir", \
    \n      "/work" \
    \n    ] \
    \n  ] \
    \n}' > /neurodocker/neurodocker_specs.json
